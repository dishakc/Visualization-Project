{"remainingRequest":"/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/src/views/MapBox.vue?vue&type=style&index=0&id=28892609&scoped=true&lang=css&","dependencies":[{"path":"/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/src/views/MapBox.vue","mtime":1606670650602},{"path":"/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/node_modules/css-loader/dist/cjs.js","mtime":1605858454676},{"path":"/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1605858459896},{"path":"/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/node_modules/postcss-loader/src/index.js","mtime":1605858457480},{"path":"/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/node_modules/cache-loader/dist/cjs.js","mtime":1605858454017},{"path":"/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/node_modules/vue-loader/lib/index.js","mtime":1605858459895}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi8qIENyaW1lIENoYXJ0Ki8KLyogPj4+IGJvZHkgewogIHdpZHRoOiAxMDYwcHg7CiAgbWFyZ2luOiA1MHB4IGF1dG87Cn0gKi8KPj4+IHBhdGggewogIHN0cm9rZTogI2ZmZjsKfQo+Pj4gcGF0aDpob3ZlciB7CiAgb3BhY2l0eTogMC4yOwp9Cj4+PiByZWN0OmhvdmVyIHsKICAvKiBmaWxsOiAjZmNjODg1OyAqLwogIG9wYWNpdHk6IDAuNTsKfQo+Pj4gLmF4aXMgewogIGZvbnQ6IDEwcHggc2Fucy1zZXJpZjsKfQo+Pj4gLmxlZ2VuZCB0ciB7CiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGdyZXk7Cn0KPj4+IC5sZWdlbmQgdHI6Zmlyc3QtY2hpbGQgewogIGJvcmRlci10b3A6IDFweCBzb2xpZCBncmV5Owp9Cgo+Pj4gLmF4aXMgcGF0aCwKPj4+IC5heGlzIGxpbmUgewogIGZpbGw6IG5vbmU7CiAgc3Ryb2tlOiAjMDAwOwogIHNoYXBlLXJlbmRlcmluZzogY3Jpc3BFZGdlczsKfQoKPj4+IC54LmF4aXMgcGF0aCB7CiAgZGlzcGxheTogbm9uZTsKfQo+Pj4gLmxlZ2VuZCB7CiAgbWFyZ2luLWJvdHRvbTogNzZweDsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICBib3JkZXItc3BhY2luZzogMHB4Owp9Cj4+PiAubGVnZW5kIHRkIHsKICBwYWRkaW5nOiA0cHggNXB4OwogIHZlcnRpY2FsLWFsaWduOiBib3R0b207Cn0KPj4+IC5sZWdlbmRGcmVxLAoubGVnZW5kUGVyYyB7CiAgYWxpZ246IHJpZ2h0OwogIHdpZHRoOiA1MHB4Owp9Ci8qID4+PiAuc3ZnLWNvbnRlbnQgewogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgdG9wOiA1MHB4OwogICAgbGVmdDogNTBweDsKfQo+Pj4gLnN2Zy1jb250ZW50MSB7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB0b3A6IDE1MHB4OwogICAgbGVmdDogOTAwcHg7Cn0KPj4+IC5zdmctY29udGVudDMgewogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgdG9wOiAxNTBweDsKICAgIGxlZnQ6IDkwMHB4OyAKfSovCi8qIENpcmNsZSBwYWNraW5nKi8KCj4+PiB0ZXh0LmxhYmVsIHsKICAvKiBuZWVkIHRvIGFkZCA+Pj4gdG8gZ2V0cyBwYXNzZWQgdG8gZDMgYmVjYXVzZSB2dWUgY3JlYXRlcyBuZXcgbWFwcGluZyAqLwogIHRleHQtYW5jaG9yOiBlbmQ7CiAgLyogYWxpZ25tZW50LWJhc2VsaW5lOiBtaWRkbGU7ICovCiAgZm9udC1zaXplOiAxMnB4OwogIGZpbGw6IGJsYWNrOwp9Cgo+Pj4gdGV4dC52YWx1ZSB7CiAgZm9udC1mYW1pbHk6ICJDb3VyaWVyIE5ldyIsIENvdXJpZXIsIG1vbm9zcGFjZTsKICBmb250LXdlaWdodDogYm9sZGVyOwogIGZvbnQtc2l6ZTogMTJweDsKICB0ZXh0LWFuY2hvcjogZW5kOwogIC8qIGFsaWdubWVudC1iYXNlbGluZTogbWlkZGxlOyAqLwogIGZpbGw6ICNlZWU7Cn0KCj4+PiByZWN0LmJhciB7CiAgdGV4dC1hbGlnbjogcmlnaHQ7IC8qIHB1bGwgdmFsdWUgdGV4dCB0byB0aGUgZW5kIG9mIHRoZSBiYXIgKi8KICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyAvKiBhbGlnbiB2YWx1ZSB0ZXh0IHdpdGggbWlkZGxlIG9mIHRoZSBiYXIgKi8KICBmaWxsOiAjN2FiY2ZmOwogIGhlaWdodDogMjBweDsgLyogYmFyIGhlaWdodCwgdGhpcyBjYW4gc3RheSBmaXhlZCAqLwp9CgoudGl0bGUgewogIG1hcmdpbi1ib3R0b206IDBweDsKICBmb250LXNpemU6IDEycHg7Cn0KLyogTWFwIEJveCAqLwovKiA+Pj4gYm9keSB7CiAgbWFyZ2luOiAwOwogIHBhZGRpbmc6IDA7Cn0gKi8KPj4+IC5tYXBib3hfY29udGFpbmVyIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgaGVpZ2h0OiA2MDBweDsKICB3aWR0aDogMTMwMHB4OwogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKfQo+Pj4gI21hcCB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMDsKICBib3R0b206IDA7CiAgd2lkdGg6IDEwMCU7Cn0KCj4+PiAubWFwYm94Z2wtY3RybC1hdHRyaWIgewogIGRpc3BsYXk6IG5vbmU7Cn0K"},{"version":3,"sources":["MapBox.vue"],"names":[],"mappingssxfile":"MapBox.vue","sourceRoot":"src/views","sourcesContent":["<script src=\"https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js\"></script>\n<template>\n  <div class=\"MapBox\">\n    <div class=\"jumbotron\">\n      <p style=\"font-size: 110%\">\n        <b>\n          On this page, we have focused on analyzing the crime data. From the\n          crime data, we aim to understand the relationship between the\n          different attributes such as neighborhoods, victim demographic and the\n          crime frequency. On this page, the users can interact with the\n          visualizations to better infer the patterns between crime frequency\n          and victim demographic in different neighborhoods in Los Angeles.\n        </b>\n      </p>\n      <br />\n      <h4>Crime Frequency by Age and Gender</h4>\n      <p>\n        The first chart indicates the frequency of crime taking place by age and\n        gender. Through this we can understand which gender is hit worse in\n        every age group.\n      </p>\n      <p>\n        * Hover over the pie chart for specific gender distribution information\n      </p>\n      <p>* Hover over the bars for specific age distribution information</p>\n      <div id=\"dashboard\"></div>\n      <br /><br />\n      <!-- <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br> -->\n      <h4>Crime by Neighborhood and Victim's Race</h4>\n      <p>\n        This zoomable circle packing shows the crime by neighborhood and\n        victimâ€™s race. Through this we can determine the race that is affected\n        most in every neighborhood.\n      </p>\n      <p>* Click on any Neighborhood for analysis by Victim's Race</p>\n      <div>\n        <center>\n          <svg width=\"400\" height=\"300\" id=\"chart\"></svg>\n        </center>\n      </div>\n      <br /><br />\n      <h4>Heat Map Indicating Crime Frequency for LA County</h4>\n      <p>\n        This chart shows the intensity of crime taking place in all the\n        neighborhoods of LA. This gives us an overview of safe and unsafe\n        neighborhoods relative to each other.\n      </p>\n      <p>* For specific information, zoom over the map</p>\n      <meta\n        name=\"viewport\"\n        content=\"initial-scale=1,maximum-scale=1,user-scalable=no\"\n      />\n      <br />\n      <div class=\"mapbox_container\">\n        <div id=\"map\"></div>\n      </div>\n      <br />\n    </div>\n  </div>\n</template>\n<script>\nimport * as d3 from \"d3\";\nimport mapboxgl from \"mapbox-gl\";\n\nexport default {\n  name: \"MapBox\",\n  data: function () {\n    return {\n      accessToken:\n        \"pk.eyJ1IjoibWFuYW5pZXRlIiwiYSI6ImNrZ2l3MGlqbDAxbW0ydG96YzY0OHp4YjYifQ.fQx_eMJ8KeqXd-UIUc0Rbw\",\n    };\n  },\n  methods: {\n    CrimeChart() {\n      function dashboard(id, fData) {\n        var barColor = \"#fdae61\";\n        function segColor(c) {\n          return {\n            Female: \"#35978f\",\n            Male: \"#bf812d\",\n            Unknown: \"#737373\",\n          }[c];\n          // return { low: \"#807dba\", mid: \"#e08214\", high: \"#41ab5d\" }[c];\n        }\n\n        // compute total for each state.\n        fData.forEach(function (d) {\n          d.total = d.freq.Female + d.freq.Male + d.freq.Unknown;\n        });\n\n        // function to handle histogram.\n        function histoGram(fD) {\n          console.log(fD);\n          var hG = {},\n            hGDim = { t: 60, r: 0, b: 40, l: 20 };\n          (hGDim.w = 800 - hGDim.l - hGDim.r),\n            (hGDim.h = 500 - hGDim.t - hGDim.b);\n\n          // var aspectRatio= '16:9';\n          // var viewBox = '0 0 ' + aspectRatio.split(':').join(' ');\n\n          //create svg for histogram.\n          var hGsvg = d3\n            .select(id)\n            .append(\"svg\")\n            .attr(\"width\", hGDim.w + hGDim.l + hGDim.r)\n            .attr(\"height\", hGDim.h + hGDim.t + hGDim.b)\n            // .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            // .attr(\"viewBox\", `0 0 1500 500`) //`0 0 1500 500`\n            // .classed('svg-content', true)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + hGDim.l + \",\" + hGDim.t + \")\");\n\n          // create function for x-axis mapping.\n          var x = d3\n            .scaleBand()\n            .rangeRound([0, hGDim.w])\n            .padding(0.1)\n            .domain(\n              fD.map(function (d) {\n                return d[0];\n              })\n            );\n\n          // Add x-axis to the histogram svg.\n          hGsvg\n            .append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + hGDim.h + \")\")\n            .call(d3.axisBottom(x));\n\n          // hGsvg\n          //   .append(\"g\")\n          //   .attr(\"class\", \"x axis\")\n          //   .selectAll(\"text\")\n          //   .append(\"text\")\n          //   .text(\"Age\")\n\n          // x => `(${x.toFixed(1)}\n          // Create function for y-axis map.\n          var y = d3\n            .scaleLinear()\n            .range([hGDim.h, 0])\n            .domain([\n              0,\n              d3.max(fD, function (d) {\n                return d[1];\n              }),\n            ]);\n\n          // Create bars for histogram to contain rectangles and freq labels.\n          var bars = hGsvg\n            .selectAll(\".bar\")\n            .data(fD)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"bar\");\n\n          //create the rectangles.\n          bars\n            .append(\"rect\")\n            .attr(\"x\", function (d) {\n              return x(d[0]);\n            })\n            .attr(\"y\", function (d) {\n              return y(d[1]);\n            })\n            .attr(\"width\", x.bandwidth())\n            .attr(\"height\", function (d) {\n              return hGDim.h - y(d[1]);\n            })\n            .attr(\"fill\", barColor)\n            .on(\"mouseover\", mouseover) // mouseover is defined below.\n            .on(\"mouseout\", mouseout); // mouseout is defined below.\n\n          //Create the frequency labels above the rectangles.\n          bars\n            .append(\"text\")\n            .text(function (d) {\n              return d3.format(\",\")(d[1]);\n            })\n            .attr(\"x\", function (d) {\n              return x(d[0]) + x.bandwidth() / 2;\n            })\n            .attr(\"y\", function (d) {\n              return y(d[1]) - 5;\n            })\n            .attr(\"text-anchor\", \"middle\");\n\n          hGsvg\n            .append(\"g\")\n            .append(\"text\")\n            .attr(\"x\", hGDim.w / 2)\n            .attr(\"y\", hGDim.h + 35)\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Age\");\n\n          hGsvg\n            .append(\"g\")\n            .append(\"text\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 0 - hGDim.l)\n            .attr(\"x\", 0 - hGDim.h / 2)\n            .attr(\"dy\", \"1em\")\n            .style(\"text-anchor\", \"middle\")\n            .text(\"Crime Frequency\");\n\n          function mouseover(event, d) {\n            // utility function to be called on mouseover.\n            // filter for selected state.\n            var st = fData.filter(function (s) {\n              return s.State == d[0];\n            })[0];\n\n            var nD = Object.keys(st.freq).map(function (s) {\n              return { type: s, freq: st.freq[s] };\n            });\n\n            // call update functions of pie-chart and legend.\n            pC.update(nD);\n            leg.update(nD);\n          }\n\n          function mouseout() {\n            // utility function to be called on mouseout.\n            // reset the pie-chart and legend.\n            pC.update(tF);\n            leg.update(tF);\n          }\n\n          // create function to update the bars. This will be used by pie-chart.\n          hG.update = function (nD, color) {\n            // update the domain of the y-axis map to reflect change in frequencies.\n            y.domain([\n              0,\n              d3.max(nD, function (d) {\n                return d[1];\n              }),\n            ]);\n\n            // Attach the new data to the bars.\n            var bars = hGsvg.selectAll(\".bar\").data(nD);\n\n            // transition the height and color of rectangles.\n            bars\n              .select(\"rect\")\n              .transition()\n              .duration(500)\n              .attr(\"y\", function (d) {\n                return y(d[1]);\n              })\n              .attr(\"height\", function (d) {\n                return hGDim.h - y(d[1]);\n              })\n              .attr(\"fill\", color);\n\n            // transition the frequency labels location and change value.\n            bars\n              .select(\"text\")\n              .transition()\n              .duration(500)\n              .text(function (d) {\n                return d3.format(\",\")(d[1]);\n              })\n              .attr(\"y\", function (d) {\n                return y(d[1]) - 5;\n              });\n          };\n          return hG;\n        }\n\n        // function to handle pieChart.\n        function pieChart(pD) {\n          var pC = {},\n            pieDim = { w: 250, h: 250 };\n          pieDim.r = Math.min(pieDim.w, pieDim.h) / 2;\n          // create svg for pie chart.\n          var piesvg = d3\n            .select(id)\n            .append(\"svg\")\n            .attr(\"width\", pieDim.w)\n            .attr(\"height\", pieDim.h)\n            // .attr(\"viewBox\", `0 0 1500 250`)\n            // .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n            // .attr(\"viewBox\", `0 0 1500 250`) //`0 0 1500 500`\n            // .classed('svg-content1', true)\n\n            .append(\"g\")\n            .attr(\n              \"transform\",\n              \"translate(\" + pieDim.w / 2 + \",\" + pieDim.h / 2 + \")\"\n            );\n\n          // create function to draw the arcs of the pie slices.\n          var arc = d3\n            .arc()\n            .outerRadius(pieDim.r - 10)\n            .innerRadius(0);\n\n          // create a function to compute the pie slice angles.\n          var pie = d3\n            .pie()\n            .sort(null)\n            .value(function (d) {\n              return d.freq;\n            });\n\n          // Draw the pie slices.\n          piesvg\n            .selectAll(\"path\")\n            .data(pie(pD))\n            .enter()\n            .append(\"path\")\n            .attr(\"d\", arc)\n            .each(function (d) {\n              this._current = d;\n            })\n            .style(\"fill\", function (d) {\n              return segColor(d.data.type);\n            })\n            .on(\"mouseover\", mouseover)\n            .on(\"mouseout\", mouseout);\n\n          // create function to update pie-chart. This will be used by histogram.\n          pC.update = function (nD) {\n            piesvg\n              .selectAll(\"path\")\n              .data(pie(nD))\n              .transition()\n              .duration(500)\n              .attrTween(\"d\", arcTween);\n          };\n          // Utility function to be called on mouseover a pie slice.\n          function mouseover(event, d) {\n            // call the update function of histogram with new data.\n            hG.update(\n              fData.map(function (v) {\n                console.log(v);\n                return [v.State, v.freq[d.data.type]];\n              }),\n              segColor(d.data.type)\n            );\n          }\n          //Utility function to be called on mouseout a pie slice.\n          function mouseout() {\n            // call the update function of histogram with all data.\n            hG.update(\n              fData.map(function (v) {\n                return [v.State, v.total];\n              }),\n              barColor\n            );\n          }\n          // Animating the pie-slice requiring a custom function which specifies\n          // how the intermediate paths should be drawn.\n          function arcTween(a) {\n            var i = d3.interpolate(this._current, a);\n            this._current = i(0);\n            return function (t) {\n              return arc(i(t));\n            };\n          }\n          return pC;\n        }\n\n        // function to handle legend.\n        function legend(lD) {\n          var leg = {};\n\n          // create table for legend.\n          var legend = d3.select(id).append(\"table\").attr(\"class\", \"legend\");\n\n          // create one row per segment.\n          var tr = legend\n            .append(\"tbody\")\n            .selectAll(\"tr\")\n            .data(lD)\n            .enter()\n            .append(\"tr\");\n\n          // create the first column for each segment.\n          tr.append(\"td\")\n            .append(\"svg\")\n            .attr(\"width\", \"16\")\n            .attr(\"height\", \"16\")\n            .append(\"rect\")\n            .attr(\"width\", \"16\")\n            .attr(\"height\", \"16\")\n            .attr(\"fill\", function (d) {\n              return segColor(d.type);\n            });\n\n          // create the second column for each segment.\n          tr.append(\"td\").text(function (d) {\n            return d.type;\n          });\n\n          // create the third column for each segment.\n          tr.append(\"td\")\n            .attr(\"class\", \"legendFreq\")\n            .text(function (d) {\n              return d3.format(\",\")(d.freq);\n            });\n\n          // create the fourth column for each segment.\n          tr.append(\"td\")\n            .attr(\"class\", \"legendPerc\")\n            .text(function (d) {\n              return getLegend(d, lD);\n            });\n\n          // Utility function to be used to update the legend.\n          leg.update = function (nD) {\n            // update the data attached to the row elements.\n            var l = legend.select(\"tbody\").selectAll(\"tr\").data(nD);\n\n            // update the frequencies.\n            l.select(\".legendFreq\").text(function (d) {\n              return d3.format(\",\")(d.freq);\n            });\n\n            // update the percentage column.\n            l.select(\".legendPerc\").text(function (d) {\n              return getLegend(d, nD);\n            });\n          };\n\n          function getLegend(d, aD) {\n            // Utility function to compute percentage.\n            return d3.format(\".0%\")(\n              d.freq /\n                d3.sum(\n                  aD.map(function (v) {\n                    return v.freq;\n                  })\n                )\n            );\n          }\n\n          return leg;\n        }\n        // calculate total frequency by segment for all state.\n        // var tF = [\"low\", \"mid\", \"high\"]\n        var tF = [\"Female\", \"Male\", \"Unknown\"].map(function (d) {\n          return {\n            type: d,\n            freq: d3.sum(\n              fData.map(function (t) {\n                return t.freq[d];\n              })\n            ),\n          };\n        });\n        // calculate total frequency by state for all segment.\n        var sF = fData.map(function (d) {\n          return [d.State, d.total];\n        });\n\n        var hG = histoGram(sF), // create the histogram.\n          pC = pieChart(tF), // create the pie-chart.\n          leg = legend(tF); // create the legend.\n      }\n      // var freqData = [\n      //   { State: \"AM\", freq: { low: 10.9, mid: 11.3, high: 8.1 } },\n      //   { State: \"BA\", freq: { low: 11.4, mid: 12.2, high: 11.8 } },\n      //   { State: \"CE\", freq: { low: 8.6, mid: 7.7, high: 7.1 } },\n      //   { State: \"DF\", freq: { low: 20.9, mid: 13, high: 16.1 } },\n      //   { State: \"ES\", freq: { low: 10.3, mid: 10.9, high: 14.5 } },\n      //   { State: \"GO\", freq: { low: 10.5, mid: 11.4, high: 13.3 } },\n      // ];\n      var freqData = [\n        {\n          State: \"0 - 10\",\n          freq: {\n            Female: 12024,\n            Male: 10275,\n            Unknown: 300,\n          },\n        },\n        {\n          State: \"11 - 20\",\n          freq: {\n            Female: 92010,\n            Male: 70165,\n            Unknown: 5027,\n          },\n        },\n        {\n          State: \"21 - 30\",\n          freq: {\n            Female: 245738,\n            Male: 206177,\n            Unknown: 222,\n          },\n        },\n        {\n          State: \"31 - 40\",\n          freq: {\n            Female: 191739,\n            Male: 193930,\n            Unknown: 152,\n          },\n        },\n        {\n          State: \"41 - 50\",\n          freq: {\n            Female: 147726,\n            Male: 163915,\n            Unknown: 101,\n          },\n        },\n        {\n          State: \"51 - 60\",\n          freq: {\n            Female: 104517,\n            Male: 127373,\n            Unknown: 80,\n          },\n        },\n        {\n          State: \"61 - 70\",\n          freq: {\n            Female: 51291,\n            Male: 61540,\n            Unknown: 33,\n          },\n        },\n        {\n          State: \"71 - 80\",\n          freq: {\n            Female: 20901,\n            Male: 21331,\n            Unknown: 12,\n          },\n        },\n        {\n          State: \"81 - 90\",\n          freq: {\n            Female: 8558,\n            Male: 6745,\n            Unknown: 2,\n          },\n        },\n        {\n          State: \"91 - 100\",\n          freq: {\n            Female: 1943,\n            Male: 1474,\n            Unknown: 38,\n          },\n        },\n      ];\n\n      dashboard(\"#dashboard\", freqData);\n    },\n    barChart(data) {\n      var width = 600;\n      var height = width;\n\n      var pack = (data) =>\n        d3.pack().size([width, height]).padding(3)(\n          d3\n            .hierarchy(data)\n            .sum((d) => d.value)\n            .sort((a, b) => b.value - a.value)\n        );\n      var color = d3\n        .scaleLinear()\n        .domain([0, 5])\n        // .range([\"hsl(152,80%,80%)\", \"hsl(228,30%,40%)\"])\n        // .range([\"#fff7ec\",\"#7f0000\"])\n        .range([\"#fee8c8\", \"#7f0000\"])\n\n        .interpolate(d3.interpolateHslLong);\n\n      const root = pack(data);\n      let focus = root;\n      let view;\n\n      var svg = d3\n        .select(\"#chart\")\n        .attr(\"width\", 600)\n        .attr(\"height\", 600)\n        .attr(\"viewBox\", `-${width / 2} -${height / 2} ${width} ${height}`)\n        .style(\"display\", \"block\")\n        .style(\"margin\", \"0 +14px\")\n        // .style(\"background\", color(0))\n        .style(\"cursor\", \"pointer\")\n        .on(\"click\", (event) => zoom(event, root));\n\n      var node = svg\n        .append(\"g\")\n        .selectAll(\"circle\")\n        .data(root.descendants().slice(1))\n        .join(\"circle\")\n        .attr(\"fill\", (d) => (d.children ? color(d.depth) : \"white\"))\n        .attr(\"pointer-events\", (d) => (!d.children ? \"none\" : null))\n        .on(\"mouseover\", function () {\n          d3.select(this).attr(\"stroke\", \"#000\");\n        })\n        .on(\"mouseout\", function () {\n          d3.select(this).attr(\"stroke\", null);\n        })\n        .on(\n          \"click\",\n          (event, d) => focus !== d && (zoom(event, d), event.stopPropagation())\n        );\n\n      var label = svg\n        .append(\"g\")\n        .style(\"font\", \"10px sans-serif\")\n        .attr(\"pointer-events\", \"none\")\n        .attr(\"text-anchor\", \"middle\")\n        .selectAll(\"text\")\n        .data(root.descendants())\n        .join(\"text\")\n        .style(\"fill-opacity\", (d) => (d.parent === root ? 1 : 0))\n        .style(\"display\", (d) => (d.parent === root ? \"inline\" : \"none\"))\n        .text((d) => d.data.name);\n\n      zoomTo([root.x, root.y, root.r * 2]);\n\n      function zoomTo(v) {\n        var k = width / v[2];\n\n        view = v;\n        label.attr(\n          \"transform\",\n          (d) => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`\n        );\n        node.attr(\n          \"transform\",\n          (d) => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`\n        );\n        node.attr(\"r\", (d) => d.r * k);\n      }\n\n      function zoom(event, d) {\n        // var focus0 = focus;\n\n        focus = d;\n\n        var transition = svg\n          .transition()\n          .duration(event.altKey ? 7500 : 750)\n          .tween(\"zoom\", (d) => {\n            console.log(d);\n            var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2]);\n            return (t) => zoomTo(i(t));\n          });\n\n        label\n          .filter(function (d) {\n            return d.parent === focus || this.style.display === \"inline\";\n          })\n          .transition(transition)\n          .style(\"fill-opacity\", (d) => (d.parent === focus ? 1 : 0))\n          .on(\"start\", function (d) {\n            if (d.parent === focus) this.style.display = \"inline\";\n          })\n          .on(\"end\", function (d) {\n            if (d.parent !== focus) this.style.display = \"none\";\n          });\n      }\n    },\n    HeatMap() {\n      mapboxgl.accessToken = this.accessToken;\n      var map = new mapboxgl.Map({\n        container: \"map\",\n        style: \"mapbox://styles/mapbox/dark-v10\",\n        center: [-118.3, 34],\n        zoom: 9,\n        // maxBounds: [\n        //     [103.6, 1.1704753],\n        //     [104.1, 1.4754753],\n        // ],\n      });\n\n      map.on(\"load\", function () {\n        // Add a geojson point source.\n        // Heatmap layers also work with a vector tile source.\n        map.addSource(\"earthquakes\", {\n          type: \"geojson\",\n          data: \"crime_mapbox.geojson\",\n        });\n\n        map.addLayer(\n          {\n            id: \"earthquakes-heat\",\n            type: \"heatmap\",\n            source: \"earthquakes\",\n            maxzoom: 11,\n            paint: {\n              // Increase the heatmap weight based on frequency and property magnitude\n              \"heatmap-weight\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"get\", \"mag\"],\n                0,\n                0,\n                3,\n                1,\n              ],\n              // Increase the heatmap color weight weight by zoom level\n              // heatmap-intensity is a multiplier on top of heatmap-weight\n              \"heatmap-intensity\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                0,\n                1,\n                18,\n                4,\n              ],\n              // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n              // Begin color ramp at 0-stop with a 0-transparancy color\n              // to create a blur-like effect.\n              \"heatmap-color\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"heatmap-density\"],\n                0,\n                \"rgba(33,102,172,0)\",\n                0.05,\n                \"#fdd49e\",\n                0.1,\n                \"#fdbb84\",\n                0.3,\n                \"#fc8d59\",\n                0.6,\n                \"#ef6548\",\n\n                0.8,\n                \"#d7301f\",\n                1,\n                \"#990000\",\n              ],\n\n              // Adjust the heatmap radius by zoom level\n              \"heatmap-radius\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                20,\n                20,\n                80,\n                100,\n              ],\n              // Transition from heatmap to circle layer by zoom level\n              \"heatmap-opacity\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                7,\n                1,\n                30,\n                1,\n              ],\n            },\n          },\n          \"waterway-label\"\n        );\n      });\n    },\n  },\n  mounted: function () {\n    console.log(\"mounted\");\n    this.CrimeChart();\n    if (!this.$store.state.vueChartData) {\n      d3.json(\"circle_chart_data.json\").then((data) => {\n        this.data = data;\n        // console.log('chartData set from file');\n        // console.log('chartData contains', this.data.length, 'rows');\n        this.$store.commit(\"vueChartData\", this.data);\n        // console.log(this.data);\n        this.barChart(this.data);\n      });\n    } else {\n      this.data = this.$store.state.vueChartData;\n      // console.log('chartData set from store');\n      // console.log('chartData contains', this.data.length, 'rows');\n      this.barChart(this.data);\n    }\n    this.HeatMap();\n  },\n};\n</script>\n\n<!-- \"scoped\" attribute limits CSS to this component only -->\n<style scoped>\n/* Crime Chart*/\n/* >>> body {\n  width: 1060px;\n  margin: 50px auto;\n} */\n>>> path {\n  stroke: #fff;\n}\n>>> path:hover {\n  opacity: 0.2;\n}\n>>> rect:hover {\n  /* fill: #fcc885; */\n  opacity: 0.5;\n}\n>>> .axis {\n  font: 10px sans-serif;\n}\n>>> .legend tr {\n  border-bottom: 1px solid grey;\n}\n>>> .legend tr:first-child {\n  border-top: 1px solid grey;\n}\n\n>>> .axis path,\n>>> .axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n>>> .x.axis path {\n  display: none;\n}\n>>> .legend {\n  margin-bottom: 76px;\n  display: inline-block;\n  border-collapse: collapse;\n  border-spacing: 0px;\n}\n>>> .legend td {\n  padding: 4px 5px;\n  vertical-align: bottom;\n}\n>>> .legendFreq,\n.legendPerc {\n  align: right;\n  width: 50px;\n}\n/* >>> .svg-content {\n    display: inline-block;\n    position: absolute;\n    top: 50px;\n    left: 50px;\n}\n>>> .svg-content1 {\n    display: inline-block;\n    position: absolute;\n    top: 150px;\n    left: 900px;\n}\n>>> .svg-content3 {\n    display: inline-block;\n    position: absolute;\n    top: 150px;\n    left: 900px; \n}*/\n/* Circle packing*/\n\n>>> text.label {\n  /* need to add >>> to gets passed to d3 because vue creates new mapping */\n  text-anchor: end;\n  /* alignment-baseline: middle; */\n  font-size: 12px;\n  fill: black;\n}\n\n>>> text.value {\n  font-family: \"Courier New\", Courier, monospace;\n  font-weight: bolder;\n  font-size: 12px;\n  text-anchor: end;\n  /* alignment-baseline: middle; */\n  fill: #eee;\n}\n\n>>> rect.bar {\n  text-align: right; /* pull value text to the end of the bar */\n  vertical-align: middle; /* align value text with middle of the bar */\n  fill: #7abcff;\n  height: 20px; /* bar height, this can stay fixed */\n}\n\n.title {\n  margin-bottom: 0px;\n  font-size: 12px;\n}\n/* Map Box */\n/* >>> body {\n  margin: 0;\n  padding: 0;\n} */\n>>> .mapbox_container {\n  position: relative;\n  height: 600px;\n  width: 1300px;\n  display: inline-block;\n}\n>>> #map {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n}\n\n>>> .mapboxgl-ctrl-attrib {\n  display: none;\n}\n</style>\n"]}]}