{"remainingRequest":"/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/src/components/HelloWorld.vue?vue&type=template&id=469af010&scoped=true&","dependencies":[{"path":"/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/src/components/HelloWorld.vue","mtime":1606704233574},{"path":"/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/node_modules/cache-loader/dist/cjs.js","mtime":1605858454017},{"path":"/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1605858459896},{"path":"/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/node_modules/cache-loader/dist/cjs.js","mtime":1605858454017},{"path":"/Users/dishakc/Documents/Data_Visualization/project_DV/project-the-vizards/demo/node_modules/vue-loader/lib/index.js","mtime":1605858459895}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}