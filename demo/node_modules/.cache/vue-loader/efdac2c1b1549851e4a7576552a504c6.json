{"remainingRequest":"/Users/posha/Documents/GitHub/DSCI554/project-the-vizards/demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/posha/Documents/GitHub/DSCI554/project-the-vizards/demo/src/components/HelloWorld.vue?vue&type=template&id=469af010&scoped=true&","dependencies":[{"path":"/Users/posha/Documents/GitHub/DSCI554/project-the-vizards/demo/src/components/HelloWorld.vue","mtime":1606706920444},{"path":"/Users/posha/Documents/GitHub/DSCI554/project-the-vizards/demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/posha/Documents/GitHub/DSCI554/project-the-vizards/demo/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/posha/Documents/GitHub/DSCI554/project-the-vizards/demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/posha/Documents/GitHub/DSCI554/project-the-vizards/demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}